---
swagger: "2.0"
info:
  version: "2019-09-18T14:29:21Z"
  title: "cyc-nbt-api-gateway"
host: "nbtapicall.execute-api.us-east-1.amazonaws.com"
basePath: "/cyc"
schemes:
  - "https"
paths:
  /eligibility/check:
    post:
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
        - cyc-nbt-hsid-auth:
            - "https://cyc-nbtuser.connectyourcare.net/eligibility.check"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar20}/eligibility/check"
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      security:
        - cyc-nbt-hsid-auth:
            - "https://cyc-nbtuser.connectyourcare.net/eligibility.check"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /employers/checkrenewalalerts:
    get:
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/employers/checkrenewalalerts"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /employers/{employerId}/checkrenewalalerts:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "employerId"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/employers/{employerId}/checkrenewalalerts"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.employerId: "method.request.path.employerId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,data-user-id'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /terms-and-conditions/get-document/{uuid}/{fileName}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "uuid"
          in: "path"
          required: true
          type: "string"
        - name: "fileName"
          in: "path"
          required: true
          type: "string"          
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar8}/terms-and-conditions/get-document/{uuid}/{fileName}"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.uuid: "method.request.path.uuid"
          integration.request.path.fileName: "method.request.path.fileName"          
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,data-user-id'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"        
  /tax-center/tax-form-download/{filename}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "filename"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar7}/tax-center/tax-form-download/{filename}"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.filename: "method.request.path.filename"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /tokens/refresh:
    post:
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
        - api_key: [ ]
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar20}/jwt/refresh"
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /users:
    get:
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
        - api_key: [ ]
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar20}/users"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Expose-Headers:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Expose-Headers: "'data-user-id'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,data-user-id'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /users/authenticate:
    post:
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar20}/users/authenticate"
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /users/authenticate/hsid:
    post:
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
        - cyc-nbt-hsid-auth:
            - "https://cyc-nbtuser.connectyourcare.net/authenticate.hsid"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar20}/users/authenticate/hsid"
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /users/info:
    get:
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        "301":
          description: "301 response"
      x-amazon-apigateway-integration:
        type: "http"
        uri: "https://${stageVariables.cycavar20}/info"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /users/lookup:
    post:
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
        - cyc-nbt-hsid-auth:
            - "https://cyc-nbtuser.connectyourcare.net/eligibility.check"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar20}/users/lookup"
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /statement/get-statement/{pdfFile}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "pdfFile"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar1}/statement/get-statement/{pdfFile}"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.pdfFile: "method.request.path.pdfFile"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /employers/renewplan/{employerPlanYearId}:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "employerPlanYearId"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/employers/renewplan/{employerPlanYearId}"
        httpMethod: "POST"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.employerPlanYearId: "method.request.path.employerPlanYearId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /employers/search:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/employers/search"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "POST"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /employers/search/cp:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/employers/search/cp"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "POST"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies:
    get:
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/employer/logo:
    get:
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/employer/logo"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/employer/{employerId}/cip-notification-emails:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "employerId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/employer/{employerId}/cip-notification-emails"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.employerId: "method.request.path.employerId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/employer/{employerId}/hierarchy-minimal-list:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "employerId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/employer/{employerId}/hierarchy-minimal-list"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.employerId: "method.request.path.employerId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/employer/{employerId}/risk-level:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "employerId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/employer/{employerId}/risk-level"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.employerId: "method.request.path.employerId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/employer/{employerId}/service-info:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "employerId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/employer/{employerId}/service-info"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.employerId: "method.request.path.employerId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/employers/search:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/employers/search"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "POST"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/initialized-search/{userId}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/initialized-search/{userId}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.userId: "method.request.path.userId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/minimal:
    get:
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/minimal"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/retrieve/list/distributors-by-sponsors:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/retrieve/list/distributors-by-sponsors"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "POST"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/retrieve/list/employer-by-distributors:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/retrieve/list/employer-by-distributors"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "POST"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/retrieve/list/hierarchies-by-employer-id/{employerId}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "employerId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/retrieve/list/hierarchies-by-employer-id/{employerId}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.employerId: "method.request.path.employerId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/retrieve/list/hierarchies-by-savings-account/{savingsAccountId}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "savingsAccountId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/retrieve/list/hierarchies-by-savings-account/{savingsAccountId}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.savingsAccountId: "method.request.path.savingsAccountId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/retrieve/list/sponsors-by-custodian/{custodian}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "custodian"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/retrieve/list/sponsors-by-custodian/{custodian}"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.custodian: "method.request.path.custodian"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/retrieve/minimal/list/by-employee-id-and-hierarchy-name:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/retrieve/minimal/list/by-employee-id-and-hierarchy-name"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "POST"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/{hierarchyId}/minimal:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "hierarchyId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/{hierarchyId}/minimal"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.hierarchyId: "method.request.path.hierarchyId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/{hierarchyId}/minimal-by-hierarchy-type:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "hierarchyId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/{hierarchyId}/minimal-by-hierarchy-type"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.hierarchyId: "method.request.path.hierarchyId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /hierarchies/{hierarchyId}/parent/id:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "hierarchyId"
          in: "path"
          required: true
          type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar2}/hierarchies/{hierarchyId}/parent/id"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.hierarchyId: "method.request.path.hierarchyId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "GET"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"                      
  /audit/{cipOrderId}:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "cipOrderId"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar5}/audit/{cipOrderId}"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.cipOrderId: "method.request.path.cipOrderId"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /cip-orders/required-proofs/{requiredproof}/documents:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "requiredproof"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar5}/cip-orders/required-proofs/{requiredproof}/documents"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
        requestParameters:
          integration.request.path.requiredproof: "method.request.path.requiredproof"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /documents:
    get:
      produces:
        - "application/json"
      parameters:
        - name: "referenceType"
          in: "query"
          required: false
          type: "string"
        - name: "referenceId"
          in: "query"
          required: false
          type: "string"
        - name: "withReasons"
          in: "query"
          required: false
          type: "string"
        - name: "userId"
          in: "query"
          required: false
          type: "string"
        - name: "referenceIds"
          in: "query"
          required: false
          type: "string"
        - name: "status"
          in: "query"
          required: false
          type: "string"
        - name: "generateDocumentLinks"
          in: "query"
          required: false
          type: "string"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar29}/documents"
        httpMethod: "GET"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
    options:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "200":
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
  /cip-orders/v2/query:
    post:
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "http_proxy"
        uri: "https://${stageVariables.cycavar5}/cip-orders/v2/query"
        responses:
          default:
            statusCode: "200"
        passthroughBehavior: "when_no_match"
        connectionType: "VPC_LINK"
        connectionId: "${stageVariables.vpcLinkId}"
        httpMethod: "POST"
    options:
      consumes:
        - "application/json"
        - "application/json;charset=UTF-8"
      produces:
        - "application/json"
        - "application/json;charset=UTF-8"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        type: "mock"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,PUT,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Api-Key,data-user-id,x-api-version'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
securityDefinitions:
  cyc-nbt-hsid-auth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "cognito_user_pools"
    x-amazon-apigateway-authorizer:
      type: "cognito_user_pools"
      providerARNs:
        - "arn:aws:cognito-idp:us-east-1:${AWS::AccountId}:userpool/${stageVariables.cogId}"
  api_key:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
definitions:
  Empty:
    type: "object"
    title: "Empty Schema"
x-amazon-apigateway-gateway-responses:
  DEFAULT_5XX:
    responseTemplates:
      application/json: "{\"CYC-ErrorMessage-V\":$context.error.messageString}"
  ACCESS_DENIED:
    statusCode: 403
    responseTemplates:
      application/json: "{\"CYC FORBIDDEN Message\":\"We are sorry, Your request cannot\
        \ be processed at this time... Please contact Support\"}"
  DEFAULT_4XX:
    responseTemplates:
      application/json: "{\"CYC-ErrorMessage-IV\":$context.error.messageString}"
  EXPIRED_TOKEN:
    statusCode: 403
    responseTemplates:
      application/json: "{\"CYC-ErrorMessage-IV-1\":$context.error.messageString}"
  INVALID_API_KEY:
    statusCode: 403
    responseTemplates:
      application/json: "{\"CYC-ErrorMessage-IV-2\":$context.error.messageString}"
  MISSING_AUTHENTICATION_TOKEN:
    statusCode: 403
    responseTemplates:
      application/json: "{\"CYC-ErrorMessage-IV-4\":$context.error.messageString}"
  INVALID_SIGNATURE:
    statusCode: 403
    responseTemplates:
      application/json: "{\"CYC-ErrorMessage-IV-3\":$context.error.messageString}"
  WAF_FILTERED:
    statusCode: 403
    responseTemplates:
      application/json: "{\"CYC-ErrorMessage-IV-5\":$context.error.messageString}"
x-amazon-apigateway-policy:
  Version: "2012-10-17"
  Statement:
    - Effect: "Deny"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:us-east-1:${AWS::AccountId}:*/*/*/*"
      Condition:
        StringNotEquals:
          aws:sourceVpce:
            - "vpce-017cc8211fdd4bb96"
            - "vpce-043430d8c42320c6b"
    - Effect: "Allow"
      Principal: "*"
      Action: "execute-api:Invoke"
      Resource: "arn:aws:execute-api:us-east-1:${AWS::AccountId}:*/*/*/*"
x-amazon-apigateway-binary-media-types:
  - "multipart/form-data"
